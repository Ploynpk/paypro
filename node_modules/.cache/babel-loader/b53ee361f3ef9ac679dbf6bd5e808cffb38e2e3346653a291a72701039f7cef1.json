{"ast":null,"code":"var _jsxFileName = \"/Users/ploy/Desktop/paypro/src/client/components/Signup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport logo from '../img/logo3.png';\n// use Link ans useNavaigate to chain the routes\nimport { Link, useNavigate } from 'react-router-dom';\n\n// function for new user to signup\n// it will render on the webpage\n// 1. img/logo\n// 2. form that could pass in username and password //   <form method='POST' action='/signup'>\n// 3. make sure to store them into database that can access later in json?\n// 4. button that will be triggle the page to redirect to the main page\n// 5. add log in option\n\n// need a function for onSubmitting (commit signup button)\n// check if the username has been existed in the database?\n// pass to userController to check user from the database\n// has to be unique name\n\n// then onSubmit={}  pass into form // button <button type=\"submit\" className=\"btn\">Sign Up</button>\n// fetch req POST method to this endpoint http://localhost:3001/signup/\n\n// state handle\n// post req to mongoDB\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const navigate = useNavigate();\n  const handleSignup = async e => {\n    e.preventDefault();\n    try {\n      // endpoint /signup\n      const response = await fetch('http://localhost:3001/signup', {\n        // send headers\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // post method req\n        method: 'POST',\n        // body will be json? passing in username and password\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      // if the status is ok\n      if (response.status === 200) {\n        response.json();\n        // usenavigate to change or redirect the route\n        navigate('/expense');\n      } else {\n        // give an alert\n        alert('Signup Failed. Please Try again with different username.');\n      }\n      // 'user created successfully is not json'\n      // await res.json()\n      //response.json()\n      //console.log('res.json() --> ', response.json())\n      // dispatch(login(data)) // info , token\n\n      // handle some other error \n    } catch (err) {\n      console.error('Error fetching username and password', err);\n    }\n  };\n\n  //1. pass in useState to setUsername and setPassword \n  // 2. connect them to backend middleware userController that received req from POST method\n  // make a function to handle them \n  // 3. use fetch to the the endpoint \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      id: \"main-logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSignup,\n      className: \"signup-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"e-mail\",\n        value: username,\n        onChange: e => setUsername(e.target.value) // use .target.value works!\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"username\",\n        type: \"text\",\n        placeholder: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value) // use .target.value works!\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        placeholder: \"password\",\n        onChange: e => setPassword(e.target.value) // have to passed it as function // use .target.value works!\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Signup, \"hYFnvv4Tt/DgoyEgTiwK4poq6SQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","logo","Link","useNavigate","jsxDEV","_jsxDEV","Signup","_s","username","setUsername","password","setPassword","email","setEmail","navigate","handleSignup","e","preventDefault","response","fetch","headers","method","body","JSON","stringify","status","json","alert","err","console","error","className","children","src","alt","id","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","type","placeholder","value","onChange","target","to","_c","$RefreshReg$"],"sources":["/Users/ploy/Desktop/paypro/src/client/components/Signup.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport logo from '../img/logo3.png'\n// use Link ans useNavaigate to chain the routes\nimport { Link, useNavigate } from 'react-router-dom'\n\n\n// function for new user to signup\n// it will render on the webpage\n// 1. img/logo\n// 2. form that could pass in username and password //   <form method='POST' action='/signup'>\n// 3. make sure to store them into database that can access later in json?\n// 4. button that will be triggle the page to redirect to the main page\n// 5. add log in option\n\n// need a function for onSubmitting (commit signup button)\n// check if the username has been existed in the database?\n// pass to userController to check user from the database\n// has to be unique name\n\n// then onSubmit={}  pass into form // button <button type=\"submit\" className=\"btn\">Sign Up</button>\n// fetch req POST method to this endpoint http://localhost:3001/signup/\n\n// state handle\n// post req to mongoDB\n\nconst Signup = () => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [email , setEmail] = useState('')\n  const navigate = useNavigate()\n\n  const handleSignup = async (e) => {\n    e.preventDefault()\n    try {\n      // endpoint /signup\n      const response = await fetch('http://localhost:3001/signup', {\n        // send headers\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        // post method req\n        method: 'POST',\n        // body will be json? passing in username and password\n        body: JSON.stringify({ username, password }),\n      })\n\n        // if the status is ok\n        if (response.status === 200) {\n            response.json()\n            // usenavigate to change or redirect the route\n            navigate('/expense')\n        } else {\n            // give an alert\n            alert('Signup Failed. Please Try again with different username.')\n        }\n      // 'user created successfully is not json'\n      // await res.json()\n      //response.json()\n      //console.log('res.json() --> ', response.json())\n      // dispatch(login(data)) // info , token\n\n      // handle some other error \n    } catch (err) {\n      console.error('Error fetching username and password', err)\n    }\n  }\n\n\n\n  //1. pass in useState to setUsername and setPassword \n  // 2. connect them to backend middleware userController that received req from POST method\n    // make a function to handle them \n  // 3. use fetch to the the endpoint \n  return (\n    <div className=\"signup-container\">\n      <img src={logo} alt=\"logo\" id=\"main-logo\" />\n      <form onSubmit={handleSignup} className=\"signup-form\">\n      <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"e-mail\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)} // use .target.value works!\n        ></input>\n        <input\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)} // use .target.value works!\n        ></input>\n        <input\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          placeholder=\"password\"\n          onChange={(e) => setPassword(e.target.value)} // have to passed it as function // use .target.value works!\n        ></input>\n        <button type=\"submit\" className=\"btn\">\n          Sign Up\n        </button>\n      </form>\n      <p>\n        Already have an account? <Link to=\"/login\">Log in</Link>  \n      </p>\n    </div>\n  )\n}\n\nexport default Signup\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,kBAAkB;AACnC;AACA,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;;AAGpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAGC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAMc,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC3D;QACAC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACD;QACAC,MAAM,EAAE,MAAM;QACd;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB,QAAQ;UAAEE;QAAS,CAAC;MAC7C,CAAC,CAAC;;MAEA;MACA,IAAIQ,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QACzBP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACf;QACAZ,QAAQ,CAAC,UAAU,CAAC;MACxB,CAAC,MAAM;QACH;QACAa,KAAK,CAAC,0DAA0D,CAAC;MACrE;MACF;MACA;MACA;MACA;MACA;;MAEA;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEF,GAAG,CAAC;IAC5D;EACF,CAAC;;EAID;EACA;EACE;EACF;EACA,oBACEvB,OAAA;IAAK0B,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/B3B,OAAA;MAAK4B,GAAG,EAAEhC,IAAK;MAACiC,GAAG,EAAC,MAAM;MAACC,EAAE,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5ClC,OAAA;MAAMmC,QAAQ,EAAEzB,YAAa;MAACgB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACrD3B,OAAA;QACIoC,IAAI,EAAC,OAAO;QACZC,IAAI,EAAC,OAAO;QACZC,WAAW,EAAC,QAAQ;QACpBC,KAAK,EAAEpC,QAAS;QAChBqC,QAAQ,EAAG7B,CAAC,IAAKP,WAAW,CAACO,CAAC,CAAC8B,MAAM,CAACF,KAAK,CAAE,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACTlC,OAAA;QACEoC,IAAI,EAAC,UAAU;QACfC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,UAAU;QACtBC,KAAK,EAAEpC,QAAS;QAChBqC,QAAQ,EAAG7B,CAAC,IAAKP,WAAW,CAACO,CAAC,CAAC8B,MAAM,CAACF,KAAK,CAAE,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACTlC,OAAA;QACEoC,IAAI,EAAC,UAAU;QACfC,IAAI,EAAC,UAAU;QACfE,KAAK,EAAElC,QAAS;QAChBiC,WAAW,EAAC,UAAU;QACtBE,QAAQ,EAAG7B,CAAC,IAAKL,WAAW,CAACK,CAAC,CAAC8B,MAAM,CAACF,KAAK,CAAE,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACTlC,OAAA;QAAQqC,IAAI,EAAC,QAAQ;QAACX,SAAS,EAAC,KAAK;QAAAC,QAAA,EAAC;MAEtC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACPlC,OAAA;MAAA2B,QAAA,GAAG,2BACwB,eAAA3B,OAAA,CAACH,IAAI;QAAC6C,EAAE,EAAC,QAAQ;QAAAf,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAAAhC,EAAA,CAlFKD,MAAM;EAAA,QAIOH,WAAW;AAAA;AAAA6C,EAAA,GAJxB1C,MAAM;AAoFZ,eAAeA,MAAM;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}